name: Terraform AWS POC Pipeline

on:
  push:
    branches:
      - main   # Se ejecuta el pipeline al hacer push en el main
  pull_request: # También se ejecuta al crear o actualizar un pull request

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest  # Usa un contenedor Ubuntu para ejecutar el pipeline

    steps:
      # Checkout del repositorio
      # Obtiene el código fuente del repositorio para ser usado en los pasos siguientes
      - name: Checkout repository
        uses: actions/checkout@v2

      # Configuración de Terraform
      # Instala la versión de Terraform especificada para asegurar compatibilidad
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0

      # Inicialización de Terraform
      # Descarga los proveedores y configura el backend
      - name: Initialize Terraform
        run: terraform init

      # Ejecución del Plan de Terraform
      # Realiza una simulación de los cambios para mostrar los recursos a crear o modificar
      - name: Terraform Plan
        run: terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_POC }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_POC_SECRET }}
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

      # Aplicación de los Cambios
      # Aplica los cambios solo si se hace un push en el main
      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_POC }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_POC_SECRET }}
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

# AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY y TF_API_TOKEN se pasan directamente a través de GitHub Actions como variables de entorno.
# Esto asegura que tu proyecto sigue las mejores prácticas y mantiene las credenciales seguras.
